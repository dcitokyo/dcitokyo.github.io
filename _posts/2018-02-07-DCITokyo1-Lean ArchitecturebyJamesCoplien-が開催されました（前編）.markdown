---
layout: post
title:  "DCI Tokyo 1 - Lean Architecture by James Coplien - が開催されました（前編）"
date:   2018-02-07 08:42:00 +0900
categories: DCITokyo
---

1月10日に六本木ヒルズにて、James Coplien氏をお招きしてLean Architectureに関する勉強会を開催しました。[UUUMさんに大変素敵な会場を提供頂き](http://system.blog.uuum.jp/entry/2018/01/15/110000)、スタッフ含めて40名前後の参加者が集まりました。

![DCI Tokyo 1](https://78.media.tumblr.com/f2c7759744d814f001a8b70da833bf37/tumblr_inline_p3rl26lK961qzvzbo_540.png)

このブログでは、当日の翻訳担当を務めた[@remore](https://twitter.com/remore)と[@ganchiku](https://twitter.com/ganchiku)が、当日の翻訳内容から抜け落ちた部分の捕捉を含めて、内容のアウトラインを簡単に振り返れればと思います。セッションの前半部分は@remoreが、後半は@ganchikuが解説を担当します。

なお当日のCoplien氏によるセッション内容は、許可を得た上でYouTubeにアップロードされていますので、より深くご覧になりたい方はこちらも併せてご参照下さい。

- [DCI Tokyo 1 - Lean Architecture by James Coplien (Part 1 of 2)](https://www.youtube.com/watch?v=AvqHqy_vqFs&t=6s)
- [DCI Tokyo 1 - Lean Architecture by James Coplien (Part 2 of 2)](https://www.youtube.com/watch?v=u4_KYk1mrVg)

---

# Form（形態）とLean Architecture

形態は機能に従う（Form Follows Function）という言葉があります。Googleで検索してみると、元々はアメリカの建築家ルイス・サリヴァンの言葉であると出てきます[^1]。この言葉は建築やプロダクトデザインなど様々な領域で引用されている言葉ですが、ソフトウェア・エンジニアリングの世界でも[しばしば引用されている](https://en.wikipedia.org/wiki/Form_follows_function#Software_engineering)ようです。今回のセッション前半では、前回の内容を簡単におさらいしつつ、この「形態」に焦点を当てた内容が主に展開されました。
[^1]: 当日Jimはルイスと同年代の建築家アドルフ・ロースの言葉と紹介していたため、要出典確認

前半部分のセッションの内容について、独断と偏見で要点を書き出してみました。なるべく短く抜き出してみたつもりなのですが、各トピックの内容が濃いせいか、結果的にそれなりの長さになってしまいました：

### 1. Form（形態）とStructure（構造）の違い
- Formは抽象的であり、Structureは具体的である
- 複数のFormをよく見ていくと、パターン認識によって共通性と可変性という特徴を抽出することができる
- ArchitectureはFormに関すること
    * Formは対称性を強調する
    * 人間の脳は共通性を見つけることに秀でている

### 2. 現代のプログラミング言語とOOPについて
- 共通性と可変性のペアをパラダイムと呼ぶ
- プログラミング言語はこれらのパラダイムのうちいくつか限られた数だけを言語の設計思想に取り入れているに過ぎない
    * 例えばOverloadingといったOOPのプログラミングテクニックはパラダイムの一つと言えるし、その他の言語が持つ機構や機能（例えばC++の場合#ifdef, Template、class, 継承といった言語が提供する機能）は共通性と可変性のペアをForm（形態）において表現しているだけとも言える
- これを実際に実装していくとStructure（構造）の話となるが、設計において我々がどうそれを捉えているかというと、あくまでFormの形で捉えている
- C++を作ったStroustrup氏は、C++をオブジェクト指向言語とは呼ばずマルチパラダイム言語だと呼んでいる
    * オブジェクト指向は一つのパラダイムに過ぎないのに、「オブジェクト指向分析」で全ての問題を解決しようと考えだすからおかしくなる
    * C++はオブジェクト指向以上のことが実現できる言語

### 3. マルチパラダイムデザインがどこで始まり、Lean Architectureがどこからきたのか
- Lean Architectureでは2種類の視点でFormを捉えている
    * What the system is（共通性や可変性を分析する）
    * What the system does（振る舞いや"間"で見る）
- 建築家は「形態は機能に従うか？（Does Form Follows Function？）」という点に関して各々の主張を持っている
    * 建築家アドルフ・ルースは「形態は機能に従う」と唱えた
    * ソフトウェアアーキテクトもこれを唱えがちだし、ユースケースを分析すれば最適なアーキテクチャも見つけられると考えがちであるが、これは完全に間違いである
- [銀行口座送金の例](https://youtu.be/AvqHqy_vqFs?t=2778)を見ると、振る舞いを表現するために適切なものはオブジェクトIDでもクラス名でもなく、Roleであることが分かる
    * 機能の形態(Form of Function)はRoleの中にある
- Roleという概念が一級市民として存在しており、オブジェクトがRoleを動的に演じることができるようなプログラミング言語を想像してみよう。機能の形態をコードで表現することができ、コードを読むだけでユースケースを理解できる。これがDCI。
    * ここでいう"機能の形態"は、オブジェクト間のやり取りや振る舞いといった"What the system does"の部分にあたるもののこと

---

前半サマリは以上となります。なお、動画の54:43頃から始まる対称性や幾何学の話を起点に展開される、現代のシステム開発におけるオブジェクト指向言語のあり方と利用のされ方に対する強い批判は、要約ではとても表現しきれる内容ではなくかつオススメの内容のため敢えて上記には含めていません。動画全てを見る時間が取れない方でも、英語と内容の両方が一部難解な部分もありますが[^2]それでも、ぜひ一度ご覧頂くことをオススメします。
[^2]: 55:46頃にJimが解説しているオペレーショナルモデルについて当日私の方で通訳として十分に説明できなかった部分については、追ってTwitterで後追いする形で[一部捕捉の説明を試みています](https://twitter.com/remore/status/951058680425807872)ので、こちらもご参照ください

# To Be Continued

更に興味がある方がいらっしゃいましたら、[今回のセッションの参加ブログ](http://nishinochekhov.hatenablog.com/entry/2018/01/11/211104)を書いて頂いた方もいらっしゃいますので、こちらも併せてご参照頂けると理解がより深まるかと思います。@ganchikuによるセッション後半の解説記事も追ってこちらのブログで配信予定となっております。また、Twitterでは `#dcitokyo` というタグで本勉強会についての過去のツイートを検索できますのでこちらもオススメです。

Jimは年内にまた来日予定があるとお話されていましたので、次回日程等決まりましたらまた告知などを行っていければと考えています。その際に、最近開設された[DCITokyoの公式Twitterアカウント](https://twitter.com/dcitokyo)から各種告知等されていく予定となっていますので、今後こちらもぜひご注目ください。
